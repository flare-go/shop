// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: stock.sql

package sqlc

import (
	"context"
)

const getStock = `-- name: GetStock :one
SELECT id, product_id, quantity, reserved_quantity, location, created_at, updated_at
FROM stocks
WHERE id = $1
`

func (q *Queries) GetStock(ctx context.Context, id int32) (*Stock, error) {
	row := q.db.QueryRow(ctx, getStock, id)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.ReservedQuantity,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getStockMovementsByReference = `-- name: GetStockMovementsByReference :many
SELECT id, stock_id, quantity, type, reference_id, reference_type, created_at
FROM stock_movements
WHERE reference_type = $1 AND reference_id = $2
ORDER BY created_at DESC
`

type GetStockMovementsByReferenceParams struct {
	ReferenceType NullStockMovementReferenceType `json:"referenceType"`
	ReferenceID   *int32                         `json:"referenceId"`
}

func (q *Queries) GetStockMovementsByReference(ctx context.Context, arg GetStockMovementsByReferenceParams) ([]*StockMovement, error) {
	rows, err := q.db.Query(ctx, getStockMovementsByReference, arg.ReferenceType, arg.ReferenceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*StockMovement{}
	for rows.Next() {
		var i StockMovement
		if err := rows.Scan(
			&i.ID,
			&i.StockID,
			&i.Quantity,
			&i.Type,
			&i.ReferenceID,
			&i.ReferenceType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStockMovements = `-- name: ListStockMovements :many
SELECT id, stock_id, quantity, type, reference_id, reference_type, created_at
FROM stock_movements
WHERE stock_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListStockMovementsParams struct {
	StockID uint64 `json:"stockId"`
	Limit   int64  `json:"limit"`
	Offset  int64  `json:"offset"`
}

func (q *Queries) ListStockMovements(ctx context.Context, arg ListStockMovementsParams) ([]*StockMovement, error) {
	rows, err := q.db.Query(ctx, listStockMovements, arg.StockID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*StockMovement{}
	for rows.Next() {
		var i StockMovement
		if err := rows.Scan(
			&i.ID,
			&i.StockID,
			&i.Quantity,
			&i.Type,
			&i.ReferenceID,
			&i.ReferenceType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
