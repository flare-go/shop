// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_id, cart_id, status, currency, subtotal, tax, discount, total, payment_intent_id, shipping_address, billing_address)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, customer_id, cart_id, status, currency, subtotal, tax, discount, total, payment_intent_id, shipping_address, billing_address, created_at, updated_at
`

type CreateOrderParams struct {
	CustomerID      string         `json:"customerId"`
	CartID          *int32         `json:"cartId"`
	Status          OrderStatus    `json:"status"`
	Currency        interface{}    `json:"currency"`
	Subtotal        pgtype.Numeric `json:"subtotal"`
	Tax             pgtype.Numeric `json:"tax"`
	Discount        pgtype.Numeric `json:"discount"`
	Total           pgtype.Numeric `json:"total"`
	PaymentIntentID *string        `json:"paymentIntentId"`
	ShippingAddress []byte         `json:"shippingAddress"`
	BillingAddress  []byte         `json:"billingAddress"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (*Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerID,
		arg.CartID,
		arg.Status,
		arg.Currency,
		arg.Subtotal,
		arg.Tax,
		arg.Discount,
		arg.Total,
		arg.PaymentIntentID,
		arg.ShippingAddress,
		arg.BillingAddress,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CartID,
		&i.Status,
		&i.Currency,
		&i.Subtotal,
		&i.Tax,
		&i.Discount,
		&i.Total,
		&i.PaymentIntentID,
		&i.ShippingAddress,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, cart_id, status, currency, subtotal, tax, discount, total, payment_intent_id, shipping_address, billing_address, created_at, updated_at
FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id uint32) (*Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CartID,
		&i.Status,
		&i.Currency,
		&i.Subtotal,
		&i.Tax,
		&i.Discount,
		&i.Total,
		&i.PaymentIntentID,
		&i.ShippingAddress,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_id, cart_id, status, currency, subtotal, tax, discount, total, payment_intent_id, shipping_address, billing_address, created_at, updated_at
FROM orders
WHERE customer_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOrdersParams struct {
	CustomerID string `json:"customerId"`
	Limit      int64  `json:"limit"`
	Offset     int64  `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]*Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.CartID,
			&i.Status,
			&i.Currency,
			&i.Subtotal,
			&i.Tax,
			&i.Discount,
			&i.Total,
			&i.PaymentIntentID,
			&i.ShippingAddress,
			&i.BillingAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, cart_id, status, currency, subtotal, tax, discount, total, payment_intent_id, shipping_address, billing_address, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     uint32      `json:"id"`
	Status OrderStatus `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (*Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CartID,
		&i.Status,
		&i.Currency,
		&i.Subtotal,
		&i.Tax,
		&i.Discount,
		&i.Total,
		&i.PaymentIntentID,
		&i.ShippingAddress,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
