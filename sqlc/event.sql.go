// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
    id, type, processed, created_at, updated_at
) VALUES (
             $1, $2, $3, $4, $5
         )
`

type CreateEventParams struct {
	ID        string             `json:"id"`
	Type      EventType          `json:"type"`
	Processed bool               `json:"processed"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.ID,
		arg.Type,
		arg.Processed,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, type, processed, created_at, updated_at
FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id string) (*Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Processed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const markEventAsProcessed = `-- name: MarkEventAsProcessed :exec
UPDATE events
SET processed = true, updated_at = $2
WHERE id = $1
`

type MarkEventAsProcessedParams struct {
	ID        string             `json:"id"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) MarkEventAsProcessed(ctx context.Context, arg MarkEventAsProcessedParams) error {
	_, err := q.db.Exec(ctx, markEventAsProcessed, arg.ID, arg.UpdatedAt)
	return err
}
