// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCartItem = `-- name: AddCartItem :exec
INSERT INTO cart_items (cart_id, product_id, price_id, stock_id, quantity, unit_price, subtotal, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
`

type AddCartItemParams struct {
	CartID    uint64  `json:"cartId"`
	ProductID string  `json:"productId"`
	PriceID   string  `json:"priceId"`
	StockID   uint64  `json:"stockId"`
	Quantity  uint64  `json:"quantity"`
	UnitPrice float64 `json:"unitPrice"`
	Subtotal  float64 `json:"subtotal"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) error {
	_, err := q.db.Exec(ctx, addCartItem,
		arg.CartID,
		arg.ProductID,
		arg.PriceID,
		arg.StockID,
		arg.Quantity,
		arg.UnitPrice,
		arg.Subtotal,
	)
	return err
}

const clearCartItems = `-- name: ClearCartItems :exec
DELETE FROM cart_items WHERE cart_id = $1
`

func (q *Queries) ClearCartItems(ctx context.Context, cartID uint64) error {
	_, err := q.db.Exec(ctx, clearCartItems, cartID)
	return err
}

const createCart = `-- name: CreateCart :exec
INSERT INTO carts (customer_id, status, currency, subtotal, tax, discount, total, expires_at, created_at, updated_at)
VALUES ($1, $2, $3, 0, 0, 0, 0, $4, NOW(), NOW())
`

type CreateCartParams struct {
	CustomerID string             `json:"customerId"`
	Status     CartStatus         `json:"status"`
	Currency   Currency           `json:"currency"`
	ExpiresAt  pgtype.Timestamptz `json:"expiresAt"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) error {
	_, err := q.db.Exec(ctx, createCart,
		arg.CustomerID,
		arg.Status,
		arg.Currency,
		arg.ExpiresAt,
	)
	return err
}

const findActiveCartByCustomerID = `-- name: FindActiveCartByCustomerID :one
SELECT id, customer_id, status, currency, subtotal, tax, discount, total, expires_at, created_at, updated_at
FROM carts
WHERE customer_id = $1 AND status = 'active' LIMIT 1
`

type FindActiveCartByCustomerIDRow struct {
	ID         int32              `json:"id"`
	CustomerID string             `json:"customerId"`
	Status     CartStatus         `json:"status"`
	Currency   Currency           `json:"currency"`
	Subtotal   float64            `json:"subtotal"`
	Tax        float64            `json:"tax"`
	Discount   float64            `json:"discount"`
	Total      float64            `json:"total"`
	ExpiresAt  pgtype.Timestamptz `json:"expiresAt"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt  pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) FindActiveCartByCustomerID(ctx context.Context, customerID string) (*FindActiveCartByCustomerIDRow, error) {
	row := q.db.QueryRow(ctx, findActiveCartByCustomerID, customerID)
	var i FindActiveCartByCustomerIDRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Currency,
		&i.Subtotal,
		&i.Tax,
		&i.Discount,
		&i.Total,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const findCartItemByProductID = `-- name: FindCartItemByProductID :one
SELECT id, cart_id, product_id, price_id, stock_id, quantity, unit_price, subtotal, created_at, updated_at
FROM cart_items
WHERE cart_id = $1 AND product_id = $2
`

type FindCartItemByProductIDParams struct {
	CartID    uint64 `json:"cartId"`
	ProductID string `json:"productId"`
}

func (q *Queries) FindCartItemByProductID(ctx context.Context, arg FindCartItemByProductIDParams) (*CartItem, error) {
	row := q.db.QueryRow(ctx, findCartItemByProductID, arg.CartID, arg.ProductID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.PriceID,
		&i.StockID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCart = `-- name: GetCart :one
SELECT id, customer_id, status, currency, subtotal, tax, discount, total, expires_at, created_at, updated_at
FROM carts
WHERE id = $1
`

type GetCartRow struct {
	ID         int32              `json:"id"`
	CustomerID string             `json:"customerId"`
	Status     CartStatus         `json:"status"`
	Currency   Currency           `json:"currency"`
	Subtotal   float64            `json:"subtotal"`
	Tax        float64            `json:"tax"`
	Discount   float64            `json:"discount"`
	Total      float64            `json:"total"`
	ExpiresAt  pgtype.Timestamptz `json:"expiresAt"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt  pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) GetCart(ctx context.Context, id int32) (*GetCartRow, error) {
	row := q.db.QueryRow(ctx, getCart, id)
	var i GetCartRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Currency,
		&i.Subtotal,
		&i.Tax,
		&i.Discount,
		&i.Total,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, cart_id, product_id, price_id, stock_id, quantity, unit_price, subtotal, created_at, updated_at
FROM cart_items
WHERE id = $1
`

func (q *Queries) GetCartItem(ctx context.Context, id int32) (*CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItem, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.PriceID,
		&i.StockID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listCartItems = `-- name: ListCartItems :many
SELECT id, cart_id, product_id, price_id, stock_id, quantity, unit_price, subtotal, created_at, updated_at
FROM cart_items
WHERE cart_id = $1
`

func (q *Queries) ListCartItems(ctx context.Context, cartID uint64) ([]*CartItem, error) {
	rows, err := q.db.Query(ctx, listCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*CartItem{}
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ProductID,
			&i.PriceID,
			&i.StockID,
			&i.Quantity,
			&i.UnitPrice,
			&i.Subtotal,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCartItem = `-- name: RemoveCartItem :exec
DELETE FROM cart_items WHERE id = $1
`

func (q *Queries) RemoveCartItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeCartItem, id)
	return err
}

const updateCartItem = `-- name: UpdateCartItem :exec
UPDATE cart_items
SET quantity = $2, subtotal = $3, updated_at = NOW()
WHERE id = $1 AND updated_at = $4
`

type UpdateCartItemParams struct {
	ID        int32              `json:"id"`
	Quantity  uint64             `json:"quantity"`
	Subtotal  float64            `json:"subtotal"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) error {
	_, err := q.db.Exec(ctx, updateCartItem,
		arg.ID,
		arg.Quantity,
		arg.Subtotal,
		arg.UpdatedAt,
	)
	return err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items
SET quantity = $2, subtotal = $3, updated_at = NOW()
WHERE id = $1
`

type UpdateCartItemQuantityParams struct {
	ID       int32   `json:"id"`
	Quantity uint64  `json:"quantity"`
	Subtotal float64 `json:"subtotal"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.ID, arg.Quantity, arg.Subtotal)
	return err
}

const updateCartStatus = `-- name: UpdateCartStatus :exec
UPDATE carts
SET status = $2, updated_at = NOW()
WHERE id = $1 AND updated_at = $3
`

type UpdateCartStatusParams struct {
	ID        int32              `json:"id"`
	Status    CartStatus         `json:"status"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) UpdateCartStatus(ctx context.Context, arg UpdateCartStatusParams) error {
	_, err := q.db.Exec(ctx, updateCartStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}

const updateCartTotals = `-- name: UpdateCartTotals :exec
UPDATE carts
SET subtotal = (SELECT COALESCE(SUM(subtotal), 0) FROM cart_items WHERE cart_id = $1),
    total = subtotal + tax - discount,
    updated_at = NOW()
WHERE id = $1 AND updated_at = $2
`

type UpdateCartTotalsParams struct {
	Column1 *int32             `json:"column1"`
	Column2 pgtype.Timestamptz `json:"column2"`
}

func (q *Queries) UpdateCartTotals(ctx context.Context, arg UpdateCartTotalsParams) error {
	_, err := q.db.Exec(ctx, updateCartTotals, arg.Column1, arg.Column2)
	return err
}
