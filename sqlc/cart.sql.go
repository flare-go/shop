// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCartItem = `-- name: AddCartItem :one
INSERT INTO cart_items (cart_id, product_id, price_id, stock_id, quantity, unit_price, subtotal)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, cart_id, product_id, price_id, stock_id, quantity, unit_price, subtotal, created_at, updated_at
`

type AddCartItemParams struct {
	CartID    int32          `json:"cartId"`
	ProductID string         `json:"productId"`
	PriceID   string         `json:"priceId"`
	StockID   *int32         `json:"stockId"`
	Quantity  int32          `json:"quantity"`
	UnitPrice pgtype.Numeric `json:"unitPrice"`
	Subtotal  pgtype.Numeric `json:"subtotal"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) (*CartItem, error) {
	row := q.db.QueryRow(ctx, addCartItem,
		arg.CartID,
		arg.ProductID,
		arg.PriceID,
		arg.StockID,
		arg.Quantity,
		arg.UnitPrice,
		arg.Subtotal,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.PriceID,
		&i.StockID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (customer_id, currency, status)
VALUES ($1, $2, 'active')
RETURNING id, customer_id, status, currency, subtotal, tax, discount, total, created_at, updated_at, expires_at
`

type CreateCartParams struct {
	CustomerID string      `json:"customerId"`
	Currency   interface{} `json:"currency"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (*Cart, error) {
	row := q.db.QueryRow(ctx, createCart, arg.CustomerID, arg.Currency)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Currency,
		&i.Subtotal,
		&i.Tax,
		&i.Discount,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return &i, err
}

const getCart = `-- name: GetCart :one
SELECT id, customer_id, status, currency, subtotal, tax, discount, total, created_at, updated_at, expires_at
FROM carts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCart(ctx context.Context, id uint32) (*Cart, error) {
	row := q.db.QueryRow(ctx, getCart, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Currency,
		&i.Subtotal,
		&i.Tax,
		&i.Discount,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return &i, err
}

const removeCartItem = `-- name: RemoveCartItem :exec
DELETE FROM cart_items WHERE id = $1 AND cart_id = $2
`

type RemoveCartItemParams struct {
	ID     uint32 `json:"id"`
	CartID int32  `json:"cartId"`
}

func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) error {
	_, err := q.db.Exec(ctx, removeCartItem, arg.ID, arg.CartID)
	return err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items
SET quantity = $3, subtotal = $4, updated_at = NOW()
WHERE id = $1 AND cart_id = $2
`

type UpdateCartItemQuantityParams struct {
	ID       uint32         `json:"id"`
	CartID   int32          `json:"cartId"`
	Quantity int32          `json:"quantity"`
	Subtotal pgtype.Numeric `json:"subtotal"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity,
		arg.ID,
		arg.CartID,
		arg.Quantity,
		arg.Subtotal,
	)
	return err
}

const updateCartStatus = `-- name: UpdateCartStatus :one
UPDATE carts
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, status, currency, subtotal, tax, discount, total, created_at, updated_at, expires_at
`

type UpdateCartStatusParams struct {
	ID     uint32     `json:"id"`
	Status CartStatus `json:"status"`
}

func (q *Queries) UpdateCartStatus(ctx context.Context, arg UpdateCartStatusParams) (*Cart, error) {
	row := q.db.QueryRow(ctx, updateCartStatus, arg.ID, arg.Status)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Currency,
		&i.Subtotal,
		&i.Tax,
		&i.Discount,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return &i, err
}
